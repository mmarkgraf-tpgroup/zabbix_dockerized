#!/usr/bin/env bash
#===============================================================================
#
#          FILE: daily_partition_cleanup.sh
#
#        AUTHOR: Marco Markgraf (mma), marco.markgraf@transporeon.com
#  ORGANIZATION: transporeon.com
#       CREATED: 2021-07-15 08:02
#===============================================================================

#=== Init ======================================================================
set -o nounset   # exit on unset variables.
set -o errexit   # exit on any error.
set -o errtrace  # any trap on ERR is inherited
#set -o xtrace    # show expanded command before execution.

unalias -a       # avoid rm being aliased to rm -rf and similar issues
LANG=C           # avoid locale issues
VERBOSE=         # Don't be verbose, unless given '-v'-option

trap "cleanup" EXIT SIGTERM

dbname='{{ dbmonitoring_partitioning_dbname }}'
daily_retention='{{ dbmonitoring_partitioning_daily_retention }}'
monthly_retention='{{ dbmonitoring_partitioning_monthly_retention }}'
logdir="{{ dbmonitoring_partitioning_logdir }}"

# this MUST be an integer
declare -i cleanup_log_retention={{ dbmonitoring_partitioning_cleanup_log_retention }}

#=== Functions =================================================================
usage (){
  echo "
  DESCRIPTION:
  Drop old PostgreSQL history and trend partitions from the Zabbix DB

  This script will drop old history and trend partitions from
  the zabbix database based on retentions set.

  Adapted from:
    https://www.zabbix.org/wiki/Docs/howto/zabbix2_postgresql_autopartitioning

  - Must be run as DB super-user
  - Should be run daily from cron, but *NOT* during a DB backup

  A \"logs\" directory will be automatically created below the directory
  where this cleanup script is executed. The logs will be purged
  automatically based on the above log retention.

  USAGE: ${0##/*/} [options] [--]

  OPTIONS:
  -h|--help     Display this message
  -V|--version  Display script version
  -v|--verbose  Print informational text
  -D|--database Which database to cleanup?
                Default: $dbname
  -d|--days     How many days of HISTORX to keep.  Pass an integer please.
                Default: $daily_retention
  -m|--months   How many months of TRENDS to keep.  Pass an integer please.
                Default: $monthly_retention
  -l|--logdir   Where to keep logs of this script.
                Default: $logdir

  EXAMPLES:

  delete all history older than 14 days:
      sudo -u postgres ${0##/*/} -d 14

  delete all trends older than 6 months:
      sudo -u postgres ${0##/*/} -m 6
  "
  exit 0
}    # ----------  end of function usage  ----------

option_handling () {
  # see /usr/share/doc/util-linux/examples/getopt-parse.bash
  OPTS=$(getopt --name "$0" \
    --options hVvD:d:m:l: \
    --longoptions help,version,verbose,database,days,months,logdir \
    --shell bash \
    -- "$@") \
    || (echo; echo "See above and try \"$0 --help\""; echo ; exit 1)

  eval set -- "$OPTS"
  unset OPTS

  while true ; do
    case "$1" in
      -h|--help)
        usage
        ;;
      -V|--version)
        echo "$0 -- Version $ScriptVersion"; exit 0
        ;;
      -D|--database)
        dbname="$2"
        shift 2
        ;;
      -d|--days)
        daily_retention="$2 days"
        shift 2
        ;;
      -l|--logdir)
        logdir="$2"
        shift 2
        ;;
      -m|--months)
        monthly_retention="$2 months"
        shift 2
        ;;
      -v|--verbose)
        VERBOSE=true
        shift
        ;;
      --)
        shift ; break
        ;;
      *)
        echo "I don't know what to do with \"$1\". Try $0 --help"
        exit 1
        ;;
    esac
  done
} # ----------  end of function option_handling  ----------

cleanup () { # Will be called by the trap above, no need to call it manually.
  :
} # ----------  end of function cleanup  ----------


worker() {
  # clean up old logs
  find ${logdir} -name "${sscript}.*.log" -mtime +${cleanup_log_retention} -delete
  # begin run
  echo '================================================================'
  date +"%Y-%m-%d %H:%M:%S %Z"
  echo "Script..: ${abspath}/${script}"
  echo "Hostname: $(hostname)"
  echo "Logfile.: ${logfile}"
  echo "Settings:"
  echo "   dbname=${dbname}"
  echo "   daily_retention='${daily_retention}'"
  echo "   monthly_retention='${monthly_retention}'"
  echo "   cleanup_log_retention=${cleanup_log_retention}"
  echo
  drop_old_partitions || exit 1
} # ----------  end of function worker ----------


drop_old_partitions () {
  echo 'drop_old_partitions --------------------------------------------'
  date +"%Y-%m-%d %H:%M:%S %Z"
  echo
  psql -Xqte -h /srv/{{ dbmonitoring_partitioning_service_name }} -v ON_ERROR_STOP=on ${dbname} <<EOF
    SELECT zbx_part_cleanup_func('${daily_retention}', 'day');
    SELECT zbx_part_cleanup_func('${monthly_retention}', 'month');
EOF
  rc=$?
  # error encountered?
  if [[ ${rc} -ne 0 ]]; then
    # force cron to email someone (be sure to set "MAILTO" in crontab)
    # add two blanks to beginning of every line to prevent MS Outlook automatic word-wrapping
    echo "
  ************* ERROR encountered!

  ERROR in Zabbix partition maintenance script!

  Script..: ${abspath}/${script}
  Host....: $(hostname)
  Database: ${dbname}
  Log file: ${logfile}
  Date....: $(date +'%Y-%m-%d %H:%M:%S %Z')

  Please investigate!!!


  Tail of log:
  ============
$(tail ${logfile}|sed -e 's/^/  /')
" >&3
    # write to log
    echo '************* ERROR encountered! Exiting...'
  fi
  echo "Ended: $(date +'%Y-%m-%d %H:%M:%S %Z')"
  echo
  return $rc
} # ----------  end of function drop_old_partitions ----------

#=== Main ======================================================================
option_handling "$@"

abspath=$(cd ${0%/*};pwd)     # get absolute path of script directory
script=${0##*/}              # script name
sscript=${script%.*}         # script name without ".sh"
logfile=${logdir}/${sscript}.$(date "+%Y-%m-%d").log

# create log subdirectory if does not exist
if [[ ! -d ${logdir} ]]; then
  mkdir -p ${logdir}
  if [[ $? -ne 0 ]]; then
    echo "$(hostname) ${0} ERROR: unable to create log directory" >&2
    exit 2
  fi
fi

# non-interactive?
if [[ $(tty) == "not a tty" ]]; then # run non-interactively (i.e. cron)
  exec 3>&2                          # save stderr descriptor to send error emails from cron
  worker >> ${logfile} 2>&1          # everything else to log file
else                                 # run interactively (i.e. human)
  exec 3>/dev/null                   # no need to send email errors
  worker 2>&1 | tee -a ${logfile}    # send to both stdout and logfile
fi
exec 3>&- # close descriptor
